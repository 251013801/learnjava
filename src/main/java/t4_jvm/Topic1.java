package t4_jvm;

public class Topic1 {
    /*
        1.JVM组成
            程序计数器：线程私有，当前线程执行的字节码行号指示器

            虚拟机栈：Java线程私有，描述java方法执行的内存模型，每个方法执行的同时，都会创建一个栈帧保存相关信息。

            本地方法栈：本地方法私有，描述本地方法执行的内存模型。

            堆：一个JVM内的所有线程所共有，用于存储所有的对象实例及数组。是垃圾回收机制主要管理的区域，
               也是各种考察和使用的重中之重。

            方法区：各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。

            直接内存（堆外内存）：直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java虚拟机规范中定义的内存区域，
                   但是这部分内存也被频繁地使用，而且也可能导致OutOfMemoryError 异常出现。

                   直接内存的使用，避免了在Java 堆和Native 堆中来回复制数据；在一些场景中能显著提高性能。

                   直接内存的分配不会受到Java 堆大小的限制，但是，还是会受到本机总内存（包括RAM 及SWAP 区或者分页文件）的大小及处理器
                   寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置-Xmx等参数信息，但经常会忽略掉直接内存，
                   使得各个内存区域的总和大于物理内存限制（包括物理上的和操作系统级的限制），从而导致动态扩展时出现OutOfMemoryError异常。

                   一般的应用开发用的还是很少。

        2.对象的垃圾回收（GC）规则
            计数法

            GC Root法：


                GC Roots：



        3.Java堆的组成
            年轻代（8:1:1）：
                特点：朝生夕死，生命极短。
                Eden区：
                From Survivor区：
                To Survivor区：

            老年代：


        4.垃圾回收算法与垃圾收集器

        5.常见问题及排查工具

        6.性能调优

        7.类加载机制
            new 一个对象的过程
                https://www.cnblogs.com/JackPn/p/9386182.html

        8.java内存模型

        9.逃逸分析

        10.ThreadLocal
     */
}
